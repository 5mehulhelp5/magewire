<?php

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Magewire\Notifier\NotificationStateEnum;
use Magewirephp\Magewire\Model\Magewire\Notifier\NotificationTypeEnum;
use Magewirephp\Magewire\ViewModel\Magewire as MagewireViewModel;

/** @var Escaper $escaper */
/** @var Template $block */
/** @var MagewireViewModel $magewireViewModel */

$magewireViewModel = $block->getData('view_model');
$magewireTemplateFragment = $magewireViewModel->utils()->template()->fragment();

/** @internal Do not modify to ensure Magewire continues to function correctly. */
?>
<?php $script = $magewireTemplateFragment->script()->start() ?>
<script>
    function magewireNotifier() {
        'use strict';

        return {
            <?php /* Pattern: always use the CSP version if available. */ ?>
            ...Magewire.addons.notifier.csp(),

            get notifications() {
                return Magewire.addons.notifier.notifications;
            },

            <?php /* All available x-bind options. */ ?>
            bindings: {
                notification: {
                    wrapper: function() {
                        return {
                            'x-bind:class'() {
                                return {
                                    <?php foreach (NotificationTypeEnum::cases() as $type): ?>
                                    '<?= $escaper->escapeJs($type->getCssClass()) ?>': this.notification.type === '<?= $type->value ?>',
                                    <?php endforeach ?>

                                    <?php foreach (NotificationStateEnum::cases() as $state): ?>
                                    '<?= $escaper->escapeJs($state->getCssClass()) ?>': this.notification.type === '<?= $state->value ?>',
                                    <?php endforeach ?>
                                }
                            },
                            'x-on:click'() {
                                this.terminate()
                            },
                            'x-on:mouseenter'() {
                                this.clearTimeout()
                            },
                            'x-on:mouseleave'() {
                                this.cleanup()
                            }
                        }
                    },

                    title: function() {
                        return {
                            'x-bind:class'() {
                                return {
                                    'magewire-notification-title': true,
                                    'font-bold': true
                                }
                            }
                        }
                    },

                    text: function() {
                        return {
                            'x-bind:class'() {
                                return {
                                    'magewire-notification-text': true,
                                    'font-bold': ! this.notification.title,
                                    'font-normal': this.notification.title
                                }
                            }
                        }
                    },

                    activityState: function() {
                        return {}
                    }
                }
            }
        }
    }

    <?php /* Register as Alpine component. */ ?>
    document.addEventListener('alpine:init', () => Alpine.data('magewireNotifier', magewireNotifier), { once: true });
</script>
<?php $script->end() ?>
